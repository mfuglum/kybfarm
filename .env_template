# InfluxDB
# The following environment variables are used to configure the InfluxDB container and become local credentials for the InfluxDB instance.
DOCKER_INFLUXDB_INIT_MODE="setup"
DOCKER_INFLUXDB_INIT_ADMIN_TOKEN="lsc8ecdb0f2b4ceea3b375c96bb7777e" # Random admin token 
DOCKER_INFLUXDB_INIT_USERNAME="farm_admin" # Replace with a username of choice
DOCKER_INFLUXDB_INIT_PASSWORD="yourpassword" # Replace with a password of choice 
DOCKER_INFLUXDB_INIT_BUCKET="FarmData" # Bucket name can be defined here
DOCKER_INFLUXDB_INIT_ORG="kybfarm"

# InfluxDB Home Assistant integration
HOST_IP=172.26.142.218 # Replace with the IP address of the host machine running InfluxDB
# InfluxDB all-access API token for integration with Home Assistant: https://docs.influxdata.com/influxdb/cloud/admin/tokens/create-token/#create-an-all-access-token
INFLUXDB_TOKEN=replace_this_with_all_access_api_token_generated_in_influxdb # Replace with the all-access API token generated in InfluxDB
INFLUXDB_PORT=8086
INFLUXDB_ORG=kybfarm
INFLUXDB_BUCKET=FarmData
INFLUXDB_DOMAIN_1=sensor
INFLUXDB_DOMAIN_2=binary_sensor
# Dashboard integration Home Assistant
INFLUXDB_URL="http://172.26.142.218:8086" # Replace with the IP address of the host machine running InfluxDB

# AppDaemon
HA_URL="http://172.26.142.218:8123" # Replace with the IP address of the host machine running Home Assistant
# Long-lived access token for AppDaemon integration with Home Assistant: https://developers.home-assistant.io/docs/auth_api/#long-lived-access-token
TOKEN="replace_this_with_long_lived_access_token_created_in_home_assistant" # Replace with the long-lived access token created in Home Assistant
# Dashboard integration Home Assistant
APPDAEMON_URL="http://172.26.142.218:5050" # Replace with the IP address of the host machine running AppDaemon

## MQTT ##
# Mosquitto MQTT broker IP and port
MOSQUITTO_BROKER_IP=172.26.142.218 # Replace with the IP address of the host machine running the Mosquitto MQTT broker
MOSQUITTO_BROKER_PORT=1883
# MQTT configuration edge device
MQTT_EDGE_KEEP_ALIVE=60


## Sensors ##

# S-LIGHT-01 sensor #
MQTT_SENSOR_01_DT_REQ="dt/gf/slight01/req"
MQTT_SENSOR_01_DT_RES="dt/gf/slight01/res"
SENSOR_01_DT_REQ_AUTOMATION_ALIAS="S-LIGHT-01 Request"
SENSOR_01_DT_REQ_INTERVAL_SEC=29
# S-LIGHT-01: Light 01
LIGHT_01_NAME="S-LIGHT-01 Light"
LIGHT_01_HA_ID="S-LIGHT-01_LIGHT"
LIGHT_01_VALUE_TEMPLATE="{{ value_json['fields'].illuminance }}"
LIGHT_01_HA_UNIT="lx"
LIGHT_01_HA_ICON="mdi:brightness-5"

# S-PAR-02 sensor #
MQTT_SENSOR_02_DT_REQ="dt/gf/spar02/req"
MQTT_SENSOR_02_DT_RES="dt/gf/spar02/res"
SENSOR_02_DT_REQ_AUTOMATION_ALIAS="S-PAR-02 Request"
SENSOR_02_DT_REQ_INTERVAL_SEC=29
# S-PAR-02: PAR 02
PAR_02_NAME="S-PAR-02 PAR"
PAR_02_HA_ID="S-PAR-02_PAR"
PAR_02_VALUE_TEMPLATE="{{ value_json['fields'].par }}"
PAR_02_HA_UNIT="µmol/m²/s"
PAR_02_HA_ICON="mdi:weather-sunny"

# S-EC-01-1 sensor #
MQTT_SENSOR_03_DT_REQ="dt/gf/sec01/1/req"
MQTT_SENSOR_03_DT_RES="dt/gf/sec01/1/res"
MQTT_SENSOR_03_CMD_REQ="cmd/sec01/1/req"
SENSOR_03_DT_REQ_AUTOMATION_ALIAS="S-EC-01-1 Request"
SENSOR_03_DT_REQ_INTERVAL_SEC=59
# S-EC-01-1: EC 03
EC_03_NAME="S-EC-01-1 EC"
EC_03_HA_ID="S-EC-01-1_EC"
EC_03_VALUE_TEMPLATE="{{ value_json['fields'].ec }}"
EC_03_HA_UNIT="µS/cm"
EC_03_HA_ICON="mdi:electron-framework"
# S-EC-01-1: Temperature 03
TEMPERATURE_03_NAME="S-EC-01-1 Temperature"
TEMPERATURE_03_HA_ID="S-EC-01-1_TEMP"
TEMPERATURE_03_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_03_HA_UNIT="°C"
TEMPERATURE_03_HA_ICON="mdi:thermometer"
# S-EC-01-1: TDS 03
TDS_03_NAME="S-EC-01-1 TDS"
TDS_03_HA_ID="S-EC-01-1_TDS"
TDS_03_VALUE_TEMPLATE="{{ value_json['fields'].tds }}"
TDS_03_HA_UNIT="mg/L"
TDS_03_HA_ICON="mdi:water"

# S-EC-01-1: Calibration text for GUI
SENSOR_03_INIT_CALIBRATION_1413_ALIAS="Initiate calibration for EC sensor 1  for 1413us/cm reference"
SENSOR_03_REG_CALIBRATION_1413_ALIAS="Register calibration for EC sensor 1  for 1413us/cm reference"
SENSOR_03_END_CALIBRATION_ALIAS="Return to normal operation EC sensor 1"
SENSOR_03_INIT_CALIBRATION_12880_ALIAS="Initiate calibration for EC sensor 1  for 12880us/cm reference"
SENSOR_03_REG_CALIBRATION_12880_ALIAS="Register calibration for EC sensor 1  for 12880us/cm reference"
# S-EC-01-1: Calibration logging
SENSOR_03_CALIBRATION_NAME="EC sensor 1 calibrated"
SENSOR_03_CALIBRATION_HA_ID="S-EC-01-1_CALIBRATION"
EC_03_CALIBRATION_VALUE_TEMPLATE="{{ (value_json['fields'].calibrated if value_json['fields'].calibrated != 0 else '1970-01-01T00:00:00Z') | as_timestamp | round(0) }}"
EC_03_CALIBRATION_UNIT="timestamp"

# S-EC-01-2 sensor #
MQTT_SENSOR_04_DT_REQ="dt/gf/sec01/2/req"
MQTT_SENSOR_04_DT_RES="dt/gf/sec01/2/res"
MQTT_SENSOR_04_CMD_REQ="cmd/sec01/2/req"
SENSOR_04_DT_REQ_AUTOMATION_ALIAS="S-EC-01-2 Request"
SENSOR_04_DT_REQ_INTERVAL_SEC=59
# S-EC-01-2: EC 04
EC_04_NAME="S-EC-01-2 EC"
EC_04_HA_ID="S-EC-01-2_EC"
EC_04_VALUE_TEMPLATE="{{ value_json['fields'].ec }}"
EC_04_HA_UNIT="µS/cm"
EC_04_HA_ICON="mdi:electron-framework"
# S-EC-01-2: Temperature 04
TEMPERATURE_04_NAME="S-EC-01-2 Temperature"
TEMPERATURE_04_HA_ID="S-EC-01-2_TEMP"
TEMPERATURE_04_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_04_HA_UNIT="°C"
TEMPERATURE_04_HA_ICON="mdi:thermometer"
# S-EC-01-2: TDS 04
TDS_04_NAME="S-EC-01-2 TDS"
TDS_04_HA_ID="S-EC-01-2_TDS"
TDS_04_VALUE_TEMPLATE="{{ value_json['fields'].tds }}"
TDS_04_HA_UNIT="mg/L"
TDS_04_HA_ICON="mdi:water"
# S-EC-01-2: Calibration text for GUI
SENSOR_04_INIT_CALIBRATION_1413_ALIAS="Initiate calibration for EC sensor 2  for 1413us/cm reference"
SENSOR_04_REG_CALIBRATION_1413_ALIAS="Register calibration for EC sensor 2  for 1413us/cm reference"
SENSOR_04_END_CALIBRATION_ALIAS="Return to normal operation EC sensor 2"
SENSOR_04_INIT_CALIBRATION_12880_ALIAS="Initiate calibration for EC sensor 2  for 12880us/cm reference"
SENSOR_04_REG_CALIBRATION_12880_ALIAS="Register calibration for EC sensor 2  for 12880us/cm reference"
# S-EC-01-2: Calibration logging
SENSOR_04_CALIBRATION_NAME="EC sensor 2 calibrated"
SENSOR_04_CALIBRATION_HA_ID="S-EC-01-2_CALIBRATION"
EC_04_CALIBRATION_VALUE_TEMPLATE="{{ (value_json['fields'].calibrated if value_json['fields'].calibrated != 0 else '1970-01-01T00:00:00Z') | as_timestamp | round(0) }}"
EC_04_CALIBRATION_UNIT="timestamp"

# S-PH-01-1 sensor #
MQTT_SENSOR_05_DT_REQ="dt/gf/sph01/1/req"
MQTT_SENSOR_05_DT_RES="dt/gf/sph01/1/res"
MQTT_SENSOR_05_CMD_REQ="cmd/sph01/1/req"
SENSOR_05_DT_REQ_AUTOMATION_ALIAS="S-PH-01-1 Request"
SENSOR_05_DT_REQ_INTERVAL_SEC=59
# S-PH-01-1: pH 05
PH_05_NAME="S-PH-01-1 pH"
PH_05_HA_ID="S-PH-01-1_PH"
PH_05_VALUE_TEMPLATE="{{ value_json['fields'].ph }}"
PH_05_HA_UNIT="pH"
PH_05_HA_ICON="mdi:ph"
# S-PH-01-1: Temperature 05
TEMPERATURE_05_NAME="S-PH-01-1 Temperature"
TEMPERATURE_05_HA_ID="S-PH-01-1_TEMP"
TEMPERATURE_05_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_05_HA_UNIT="°C"
TEMPERATURE_05_HA_ICON="mdi:thermometer"    
# S-PH-01-1: Calibration text for GUI   
SENSOR_05_INIT_CALIBRATION_0401_ALIAS="Initiate calibration for pH sensor 1  for 4.01pH reference"
SENSOR_05_REG_CALIBRATION_0401_ALIAS="Register calibration for pH sensor 1  for 4.01pH reference"
SENSOR_05_INIT_CALIBRATION_0700_ALIAS="Initiate calibration for pH sensor 1  for 7.00pH reference"
SENSOR_05_REG_CALIBRATION_0700_ALIAS="Register calibration for pH sensor 1  for 7.00pH reference"
SENSOR_05_INIT_CALIBRATION_1001_ALIAS="Initiate calibration for pH sensor 1  for 10.01pH reference"
SENSOR_05_REG_CALIBRATION_1001_ALIAS="Register calibration for pH sensor 1  for 10.01pH reference"
SENSOR_05_END_CALIBRATION_ALIAS="Return to normal operation pH sensor 1"
# S-PH-01-1: Calibration logging
SENSOR_05_CALIBRATION_NAME="pH sensor 1 calibrated"
SENSOR_05_CALIBRATION_HA_ID="S-PH-01-1_CALIBRATION"
PH_05_CALIBRATION_VALUE_TEMPLATE="{{ (value_json['fields'].calibrated if value_json['fields'].calibrated != 0 else '1970-01-01T00:00:00Z') | as_timestamp | round(0) }}"
PH_05_CALIBRATION_UNIT="timestamp"

# S-PH-01-2 sensor #
MQTT_SENSOR_06_DT_REQ="dt/gf/sph01/2/req"
MQTT_SENSOR_06_DT_RES="dt/gf/sph01/2/res"
MQTT_SENSOR_06_CMD_REQ="cmd/sph01/2/req"
SENSOR_06_DT_REQ_AUTOMATION_ALIAS="S-PH-01-2 Request"
SENSOR_06_DT_REQ_INTERVAL_SEC=59
# S-PH-01-2: pH 06
PH_06_NAME="S-PH-01-2 pH"
PH_06_HA_ID="S-PH-01-2_PH"
PH_06_VALUE_TEMPLATE="{{ value_json['fields'].ph }}"
PH_06_HA_UNIT="pH"
PH_06_HA_ICON="mdi:ph"
# S-PH-01-2: Temperature 06
TEMPERATURE_06_NAME="S-PH-01-2 Temperature"
TEMPERATURE_06_HA_ID="S-PH-01-2_TEMP"
TEMPERATURE_06_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_06_HA_UNIT="°C"
TEMPERATURE_06_HA_ICON="mdi:thermometer"
# S-PH-01-2: Calibration text for GUI
SENSOR_06_INIT_CALIBRATION_0401_ALIAS="Initiate calibration for pH sensor 2  for 4.01pH reference"
SENSOR_06_REG_CALIBRATION_0401_ALIAS="Register calibration for pH sensor 2  for 4.01pH reference"
SENSOR_06_INIT_CALIBRATION_0700_ALIAS="Initiate calibration for pH sensor 2  for 7.00pH reference"
SENSOR_06_REG_CALIBRATION_0700_ALIAS="Register calibration for pH sensor 2  for 7.00pH reference"
SENSOR_06_INIT_CALIBRATION_1001_ALIAS="Initiate calibration for pH sensor 2  for 10.01pH reference"
SENSOR_06_REG_CALIBRATION_1001_ALIAS="Register calibration for pH sensor 2  for 10.01pH reference"
SENSOR_06_END_CALIBRATION_ALIAS="Return to normal operation pH sensor 2"
# S-PH-01-2: Calibration logging
SENSOR_06_CALIBRATION_NAME="pH sensor 2 calibrated"
SENSOR_06_CALIBRATION_HA_ID="S-PH-01-2_CALIBRATION"
PH_06_CALIBRATION_VALUE_TEMPLATE="{{ (value_json['fields'].calibrated if value_json['fields'].calibrated != 0 else '1970-01-01T00:00:00Z') | as_timestamp | round(0) }}"
PH_06_CALIBRATION_UNIT="timestamp"

# S-YM-01 sensor #
MQTT_SENSOR_10_DT_REQ="dt/gf/sym01/req"
MQTT_SENSOR_10_DT_RES="dt/gf/sym01/res"
SENSOR_10_DT_REQ_AUTOMATION_ALIAS="S-YM-01 Request"
SENSOR_10_DT_REQ_INTERVAL_SEC=49
# S-YM-01: Temperature 10
TEMPERATURE_10_NAME="S-YM-01 Temperature"
TEMPERATURE_10_HA_ID="S-YM-01_TEMP"
TEMPERATURE_10_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_10_HA_UNIT="°C"
TEMPERATURE_10_HA_ICON="mdi:thermometer"
# S-YM-01: Leaf Wetness 10
LEAF_WETNESS_10_NAME="S-YM-01 Leaf Wetness"
LEAF_WETNESS_10_HA_ID="S-YM-01_LEAF_WETNESS"
LEAF_WETNESS_10_VALUE_TEMPLATE="{{ value_json['fields'].wetness }}"
LEAF_WETNESS_10_HA_UNIT="%[Leaf Wetness]"
LEAF_WETNESS_10_HA_ICON="mdi:water-percent"

# CO2_VOC_1 sensor #
MQTT_SENSOR_11_DT_REQ="dt/gf/CO2VOC/1/req"
MQTT_SENSOR_11_DT_RES="dt/gf/CO2VOC/1/res"
SENSOR_11_DT_REQ_AUTOMATION_ALIAS="CO2VOC_1 Request"
SENSOR_11_DT_REQ_INTERVAL_SEC=49
# CO2_VOC_1: Temperature 11
TEMPERATURE_11_NAME="CO2_VOC_1 Temperature"
TEMPERATURE_11_HA_ID="CO2_VOC_1_TEMP"
TEMPERATURE_11_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_11_HA_UNIT="°C"
TEMPERATURE_11_HA_ICON="mdi:thermometer"
# CO2_VOC_1: Humidity 11
HUMIDITY_11_NAME="CO2_VOC_1 Humidity"
HUMIDITY_11_HA_ID="CO2_VOC_1_RH"
HUMIDITY_11_VALUE_TEMPLATE="{{ value_json['fields'].humidity }}"
HUMIDITY_11_HA_UNIT="%[RH]"
HUMIDITY_11_HA_ICON="mdi:water-percent"
# CO2_VOC_1: CO2 11
CO2_11_NAME="CO2_VOC_1 CO2"
CO2_11_HA_ID="CO2_VOC_1_CO2"
CO2_11_VALUE_TEMPLATE="{{ value_json['fields'].co2 }}"
CO2_11_HA_UNIT="ppm"
CO2_11_HA_ICON="mdi:smoke"
# CO2_VOC_1: Dewpoint 11
DEWPOINT_11_NAME="CO2_VOC_1 Dewpoint"
DEWPOINT_11_HA_ID="CO2_VOC_1_DP"
DEWPOINT_11_VALUE_TEMPLATE="{{ value_json['fields'].dewpoint }}"
DEWPOINT_11_HA_UNIT="°C"
DEWPOINT_11_HA_ICON="mdi:thermometer-water"
# CO2_VOC_1: Volume Flow 11
VOLUMEFLOW_11_NAME="CO2_VOC_1 Volume Flow"
VOLUMEFLOW_11_HA_ID="CO2_VOC_1_VF"
VOLUMEFLOW_11_VALUE_TEMPLATE="{{ value_json['fields'].volumeFlow }}"
VOLUMEFLOW_11_HA_UNIT="m3/s"
VOLUMEFLOW_11_HA_ICON="mdi:air-filter"


# CO2_VOC_2 sensor #
MQTT_SENSOR_12_DT_REQ="dt/gf/CO2VOC/2/req"
MQTT_SENSOR_12_DT_RES="dt/gf/CO2VOC/2/res"
SENSOR_12_DT_REQ_AUTOMATION_ALIAS="CO2VOC_2 Request"
SENSOR_12_DT_REQ_INTERVAL_SEC=49
# CO2_VOC_2: Temperature 12
TEMPERATURE_12_NAME="CO2_VOC_2 Temperature"
TEMPERATURE_12_HA_ID="CO2_VOC_2_TEMP"
TEMPERATURE_12_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_12_HA_UNIT="°C"
TEMPERATURE_12_HA_ICON="mdi:thermometer"
# CO2_VOC_2: Humidity 12
HUMIDITY_12_NAME="CO2_VOC_2 Humidity"
HUMIDITY_12_HA_ID="CO2_VOC_2_RH"
HUMIDITY_12_VALUE_TEMPLATE="{{ value_json['fields'].humidity }}"
HUMIDITY_12_HA_UNIT="%[RH]"
HUMIDITY_12_HA_ICON="mdi:water-percent"
# CO2_VOC_2: CO2 12
CO2_12_NAME="CO2_VOC_2 CO2"
CO2_12_HA_ID="CO2_VOC_2_CO2"
CO2_12_VALUE_TEMPLATE="{{ value_json['fields'].co2 }}"
CO2_12_HA_UNIT="ppm"
CO2_12_HA_ICON="mdi:smoke"
# CO2_VOC_2: Dewpoint 12
DEWPOINT_12_NAME="CO2_VOC_2 Dewpoint"
DEWPOINT_12_HA_ID="CO2_VOC_2_DP"
DEWPOINT_12_VALUE_TEMPLATE="{{ value_json['fields'].dewpoint }}"
DEWPOINT_12_HA_UNIT="°C"
DEWPOINT_12_HA_ICON="mdi:thermometer-water"
# CO2_VOC_2: Volume Flow 12
VOLUMEFLOW_12_NAME="CO2_VOC_2 Volume Flow"
VOLUMEFLOW_12_HA_ID="CO2_VOC_2_VF"
VOLUMEFLOW_12_VALUE_TEMPLATE="{{ value_json['fields'].volumeFlow }}"
VOLUMEFLOW_12_HA_UNIT="m3/s"
VOLUMEFLOW_12_HA_ICON="mdi:air-filter"

# STH01_1 sensor #
MQTT_SENSOR_13_DT_REQ="dt/gf/STH01/1/req"
MQTT_SENSOR_13_DT_RES="dt/gf/STH01/1/res"
SENSOR_13_DT_REQ_AUTOMATION_ALIAS="STH01_1 Request"
SENSOR_13_DT_REQ_INTERVAL_SEC=49
# STH01_1: Temperature 13
TEMPERATURE_13_NAME="STH01_1 Temperature"
TEMPERATURE_13_HA_ID="STH01_1_TEMP"
TEMPERATURE_13_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_13_HA_UNIT="°C"
TEMPERATURE_13_HA_ICON="mdi:thermometer"
# STH01_1: Humidity 13
HUMIDITY_13_NAME="STH01_1 Humidity"
HUMIDITY_13_HA_ID="STH01_1_RH"
HUMIDITY_13_VALUE_TEMPLATE="{{ value_json['fields'].humidity }}"
HUMIDITY_13_HA_UNIT="%[RH]"
HUMIDITY_13_HA_ICON="mdi:water-percent"
# STH01_1: Dewpoint 13
DEWPOINT_13_NAME="STH01_1 Dewpoint"
DEWPOINT_13_HA_ID="STH01_1_DP"
DEWPOINT_13_VALUE_TEMPLATE="{{ value_json['fields'].dewpoint }}"
DEWPOINT_13_HA_UNIT="°C"
DEWPOINT_13_HA_ICON="mdi:thermometer-water"



# STH01_2 sensor #
MQTT_SENSOR_14_DT_REQ="dt/gf/STH01/2/req"
MQTT_SENSOR_14_DT_RES="dt/gf/STH01/2/res"
SENSOR_14_DT_REQ_AUTOMATION_ALIAS="STH01_2 Request"
SENSOR_14_DT_REQ_INTERVAL_SEC=49
# STH01_2: Temperature 14
TEMPERATURE_14_NAME="STH01_2 Temperature"
TEMPERATURE_14_HA_ID="STH01_2_TEMP"
TEMPERATURE_14_VALUE_TEMPLATE="{{ value_json['fields'].temperature }}"
TEMPERATURE_14_HA_UNIT="°C"
TEMPERATURE_14_HA_ICON="mdi:thermometer"
# STH01_2: Humidity 14
HUMIDITY_14_NAME="STH01_2 Humidity"
HUMIDITY_14_HA_ID="STH01_2_RH"
HUMIDITY_14_VALUE_TEMPLATE="{{ value_json['fields'].humidity }}"
HUMIDITY_14_HA_UNIT="%[RH]"
HUMIDITY_14_HA_ICON="mdi:water-percent"
# STH01_2: Dewpoint 14
DEWPOINT_14_NAME="STH01_2 Dewpoint"
DEWPOINT_14_HA_ID="STH01_2_DP"
DEWPOINT_14_VALUE_TEMPLATE="{{ value_json['fields'].dewpoint }}"
DEWPOINT_14_HA_UNIT="°C"
DEWPOINT_14_HA_ICON="mdi:thermometer-water"


# Actuators #
# Relay 01 - 16
MQTT_RELAY_01_CMD_REQ="cmd/relay01/req"
RELAY_01_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 01, Turn on"
RELAY_01_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 01, Turn off"

MQTT_RELAY_02_CMD_REQ="cmd/relay02/req"
RELAY_02_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 02, Turn on"
RELAY_02_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 02, Turn off"

MQTT_RELAY_03_CMD_REQ="cmd/relay03/req"
RELAY_03_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 03, Turn on"
RELAY_03_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 03, Turn off"

MQTT_RELAY_04_CMD_REQ="cmd/relay04/req"
RELAY_04_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 04, Turn on"
RELAY_04_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 04, Turn off"

MQTT_RELAY_05_CMD_REQ="cmd/relay05/req"
RELAY_05_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 05, Turn on"
RELAY_05_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 05, Turn off"

MQTT_RELAY_06_CMD_REQ="cmd/relay06/req"
RELAY_06_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 06, Turn on"
RELAY_06_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 06, Turn off"

MQTT_RELAY_07_CMD_REQ="cmd/relay07/req"
RELAY_07_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 07, Turn on"
RELAY_07_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 07, Turn off"

MQTT_RELAY_08_CMD_REQ="cmd/relay08/req"
RELAY_08_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 08, Turn on"
RELAY_08_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 08, Turn off"

MQTT_RELAY_09_CMD_REQ="cmd/relay09/req"
RELAY_09_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 09, Turn on"
RELAY_09_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 09, Turn off"

MQTT_RELAY_10_CMD_REQ="cmd/relay10/req"
RELAY_10_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 10, Turn on"
RELAY_10_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 10, Turn off"

MQTT_RELAY_11_CMD_REQ="cmd/relay11/req"
RELAY_11_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 11, Turn on"
RELAY_11_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 11, Turn off"

MQTT_RELAY_12_CMD_REQ="cmd/relay12/req"
RELAY_12_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 12, Turn on"
RELAY_12_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 12, Turn off"

MQTT_RELAY_13_CMD_REQ="cmd/relay13/req"
RELAY_13_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 13, Turn on"
RELAY_13_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 13, Turn off"

MQTT_RELAY_14_CMD_REQ="cmd/relay14/req"
RELAY_14_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 14, Turn on"
RELAY_14_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 14, Turn off"

MQTT_RELAY_15_CMD_REQ="cmd/relay15/req"
RELAY_15_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 15, Turn on"
RELAY_15_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 15, Turn off"

MQTT_RELAY_16_CMD_REQ="cmd/relay16/req"
RELAY_16_CMD_REQ_ON_AUTOMATION_ALIAS="Relay 16, Turn on"
RELAY_16_CMD_REQ_OFF_AUTOMATION_ALIAS="Relay 16, Turn off"

#Solid state relay
MQTT_SOLID_STATE_RELAY_01_CMD_REQ="cmd/solid_state_relay01/req"
MQTT_SOLID_STATE_RELAY_01_CMD_RES="cmd/solid_state_relay01/res"
MQTT_SOLID_STATE_RELAY_01_DT_REQ="dt/solid_state_relay01/req"
MQTT_SOLID_STATE_RELAY_01_DT_RES="dt/solid_state_relay01/res"
SOLID_STATE_RELAY_01_CMD_REQ_AUTOMATION_ALIAS="Solid state relay 01, Update state"
# Channel input number states for automation

SOLID_STATE_RELAY_01_CMD_REQ_ON_AUTOMATION_ALIAS="Solid state relay 01, Turn on"
SOLID_STATE_RELAY_01_CMD_REQ_OFF_AUTOMATION_ALIAS="Solid state relay 01, Turn off"
SOLID_STATE_RELAY_01_CMD_REQ_STOP_PWM_LOOP_AUTOMATION_ALIAS="Solid state relay 01, Stop PWM loop"
SOLID_STATE_RELAY_01_CMD_REQ_TURN_ON_FOR_AUTOMATION_ALIAS="Solid state relay 01, Turn on for {{ states('input_number.ssr_turn_on_for') | round(0) }} seconds"


SSR_DUTY_CYCLE={{  states('input_number.ssr_duty_cycle') | round(0) }}
SSR_BASE_PERIOD={{  states('input_number.ssr_base_period') | round(0) }}
SSR_STOP_LOOP={{  states('input_boolean.solid_state_relay_stop_loop') }}
SSR-TIME = {{  states('input_number.ssr_turn_on_for') | round(0) }}

# FAN VOLTAGE
MQTT_FAN_VOLTAGE_CMD_REQ="cmd/fan_voltage/req"
MQTT_FAN_VOLTAGE_STATE={{  states('input_number.new_intake_fan_voltage') | round(0) }}
MQTT_FAN_VOLTAGE_CMD_RES="cmd/fan_voltage/res"
MQTT_FAN_VOLTAGE_CMD_REQ_AUTOMATION_ALIAS="Fan voltage, Update"

#VALVE VOLTAGE
MQTT_VALVE_VOLTAGE_CMD_REQ="cmd/valve_voltage/req"
MQTT_VALVE_VOLTAGE_STATE={{  states('input_number.valve_voltage') | round(0) }}
MQTT_VALVE_VOLTAGE_CMD_RES="cmd/valve_voltage/res"
MQTT_VALVE_VOLTAGE_CMD_REQ_AUTOMATION_ALIAS="Valve voltage, Update"


# Grow lamp1: Heliospectra Elixia 
LAMP_01_IP="10.53.11.165" # Replace with the IP address of the Heliospectra Elixia grow lamp
MQTT_LAMP_01_CMD_REQ="cmd/lamp01/req"
MQTT_LAMP_01_CMD_RES="cmd/lamp01/res"
MQTT_LAMP_01_DT_REQ="dt/lamp01/req"
MQTT_LAMP_01_DT_RES="dt/lamp01/res"
LAMP_01_CMD_REQ_AUTOMATION_ALIAS="Lamp 01, Update LED intensity"
# Channel input number states for automation
L1CHANNEL_450NM_STATE={{  states('input_number.elixia_1_channel_450nm') | round(0) }}
L1CHANNEL_660NM_STATE={{  states('input_number.elixia_1_channel_660nm') | round(0) }}
L1CHANNEL_735NM_STATE={{  states('input_number.elixia_1_channel_735nm') | round(0) }}
L1CHANNEL_5700K_STATE={{  states('input_number.elixia_1_channel_5700k') | round(0) }}

# Grow lamp2: Heliospectra Elixia 
LAMP_02_IP="10.53.9.231" # Replace with the IP address of the Heliospectra Elixia grow lamp
MQTT_LAMP_02_CMD_REQ="cmd/lamp02/req"
MQTT_LAMP_02_CMD_RES="cmd/lamp02/res"
MQTT_LAMP_02_DT_REQ="dt/lamp02/req"
MQTT_LAMP_02_DT_RES="dt/lamp02/res"
LAMP_02_CMD_REQ_AUTOMATION_ALIAS="Lamp 02, Update LED intensity"
# Channel input number states for automation
L2CHANNEL_450NM_STATE={{  states('input_number.elixia_2_channel_450nm') | round(0) }}
L2CHANNEL_660NM_STATE={{  states('input_number.elixia_2_channel_660nm') | round(0) }}
L2CHANNEL_735NM_STATE={{  states('input_number.elixia_2_channel_735nm') | round(0) }}
L2CHANNEL_5700K_STATE={{  states('input_number.elixia_2_channel_5700k') | round(0) }}   


#Cooling PID
COOLING_PID_CMD_REQ_AUTOMATION_ALIAS="Cooling PID, enable/disable"
MQTT_COOLING_PID_ENABLE_CMD_REQ="cmd/cooling_pid/req"
PID_CMD_REQ_INTERVAL_SEC= 30
#Heating PID
HEATING_PID_CMD_REQ_AUTOMATION_ALIAS = "Heating PID, enable/disable"
MQTT_HEATING_PID_ENABLE_CMD_REQ="cmd/heating_pid/req"

#CO2 PID
CO2_PID_CMD_REQ_AUTOMATION_ALIAS = "CO2 PID, enable/disable"
MQTT_CO2_PID_ENABLE_CMD_REQ="cmd/co2_pid/req"

# Reference humidity
MQTT_REF_HUMID_CMD_REQ="cmd/refhumid/req"
MQTT_REF_HUMID_CMD_RES="cmd/refhumid/res"
MQTT_REF_HUMID_CMD_REQ_AUTOMATION_ALIAS="Ref Humid, Update Ref humid"
# Channel input number states for automation
REF_HUMID={{  states('input_number.humid_ref') | round(0) }}

# Reference temperature
MQTT_REF_TEMP_CMD_REQ="cmd/reftemp/req"
MQTT_REF_TEMP_CMD_RES="cmd/reftemp/res"
MQTT_REF_TEMP_CMD_REQ_AUTOMATION_ALIAS="Ref temp, Update Ref temp"
# Channel input number states for automation
REF_TEMP={{  states('input_number.temp_ref') | round(0) }}

MQTT_REF_CO2_CMD_REQ="cmd/refco2/req"
MQTT_REF_CO2_CMD_RES="cmd/refco2/res"
MQTT_REF_CO2_DT_REQ="dt/refco2/req"
MQTT_REF_CO2_DT_RES="dt/refco2/res"
MQTT_REF_CO2_CMD_REQ_AUTOMATION_ALIAS="Ref CO2, Update Ref CO2"
REF_CO2 = {{  states('input_number.co2_ref') | round(0) }}



# Dummy control #
P_10_NAME="Dummy Control Signal Temperature"
P_10_HA_ID="GF_P_10"
MQTT_P_10_STATE="ha/desktop_gf/actuators/temperature"
P_10_VALUE_TEMPLATE="{{ (value_json['control_signal'] | float) | round(2) }}"
P_10_HA_UNIT="[float]"
P_10_HA_ICON="mdi:heat-wave"
P_10_GAIN=0.5
P_10_REFERENCE=22.0
P_10_SENSOR=sensor.s_ec_01_2_temperature



# Air pump controller
AIR_PUMP_ID = "input_boolean.relay_3"


# Intake fan controller
HUMID_SENSOR_ID = "sensor.scd_41_humidity"
TEMP_SENSOR_ID = "sensor.scd_41_temperature"
INTAKE_FAN_ID = "input_boolean.relay_5"
HUMID_LOW_ID = "input_number.intake_fan_humid_low"
HUMID_HIGH_ID = "input_number.intake_fan_humid_high"
TEMP_LOW_ID = "input_number.intake_fan_temp_low"
TEMP_HIGH_ID = "input_number.intake_fan_temp_high"
INTAKE_FAN_TOGGLE_ID = "input_boolean.intake_fan_toggle"

#New intake fan controller
FAN_MODE_ID = "input_select.new_intake_fan_modes"
FAN_MANUAL_TOGGLE_ID = "input_boolean.new_intake_fan_toggle"
FAN_VOLTAGE_ID = "input_number.new_intake_fan_voltage"

# Lamp 1 controller
LAMP_1_450_ID = "input_number.elixia_1_channel_450nm"
LAMP_1_5700_ID = "input_number.elixia_1_channel_5700k"
LAMP_1_660_ID = "input_number.elixia_1_channel_660nm"
LAMP_1_735_ID = "input_number.elixia_1_channel_735nm"
LAMP_1_BLUE_ID = "input_number.lamp_blue"
LAMP_1_GREEN_ID = "input_number.lamp_green"
LAMP_1_RED_ID = "input_number.lamp_red"
LAMP_1_FAR_RED_ID = "input_number.lamp_far_red"
LAMP_1_START_TIME_ID = "input_datetime.lamp_start_time"
LAMP_1_FINISH_TIME_ID = "input_datetime.lamp_finish_time"
LAMP_1_TOGGLE_ID = "input_boolean.lamp_control_toggle"

# Lamp 2 controller
LAMP_2_450_ID = "input_number.elixia_2_channel_450nm"
LAMP_2_5700_ID = "input_number.elixia_2_channel_5700k"
LAMP_2_660_ID = "input_number.elixia_2_channel_660nm"
LAMP_2_735_ID = "input_number.elixia_2_channel_735nm"
LAMP_2_BLUE_ID = "input_number.lamp_blue"
LAMP_2_GREEN_ID = "input_number.lamp_green"
LAMP_2_RED_ID = "input_number.lamp_red"
LAMP_2_FAR_RED_ID = "input_number.lamp_far_red"
LAMP_2_START_TIME_ID = "input_datetime.lamp_start_time"
LAMP_2_FINISH_TIME_ID = "input_datetime.lamp_finish_time"
LAMP_2_TOGGLE_ID = "input_boolean.lamp_control_toggle"



# Mixing tank ec controller

MIX_EC_RATIO_1 = 0.6
MIX_EC_RATIO_2 = 1.8
MIX_EC_RATIO_3 = 1.2
MIX_FLOWRATE_1 = 0.0004347
MIX_FLOWRATE_2 = 0.0003436
MIX_FLOWRATE_3 = 0.000357
MIX_EC_CONSTANT = 0.0034
MIX_MARGIN = 0.01 
MIX_TANK_VOL = 350
MIX_PERIPUMP_ID_1 = "input_boolean.relay_14"
MIX_PERIPUMP_ID_2 = "input_boolean.relay_15"
MIX_PERIPUMP_ID_3 = "input_boolean.relay_16"
MIX_EC_SENSOR_ID = "sensor.s_ec_01_2_ec"
MIX_WAIT_TIME =  200
MIX_TOGGLE_ID = "input_boolean.mix_control_toggle"
MIX_EC_REF_ID = "input_number.ec_ref"
MIX_PUMP_ID = "input_boolean.relay_2"

# Grow tank ec controller

GROW_FLOWRATE = 0.0486111
GROW_TANK_VOL = 100
GROW_EC_SENSOR_ID = "sensor.s_ec_01_1_ec"
GROW_SOLENOID_1_ID = "input_boolean.relay_11"
GROW_N_TAU = 4
GROW_TAU = 70
GROW_MAX_RUNTIME = 100 
GROW_DRAINTIME = 150
GROW_TOGGLE_ID = "input_boolean.grow_control_toggle"
GROW_RESET_TIME = 3600

